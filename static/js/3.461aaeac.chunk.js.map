{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/atoms/Word.tsx","components/atoms/Cloud.tsx","components/atoms/Button.tsx","components/molecules/CheckSentenceControls.tsx","components/organisms/DragAndDropBlock.tsx"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","TextContainer","text","CloudArea","children","onDragEnter","PrimaryButton","onClick","ButtonContainer","VerificationStatusContainer","ButtonWrapper","observer","setCurrentSentence","useState","data-color","isWrong","isCorrect","data-status","store","setWrong","setTimeout","utterThis","SpeechSynthesisUtterance","setCorrect","speechSynthesis","WordContainer","id","words","dragItem","useRef","dragNode","useEffect","setClouds","orderedArray","dragEnterHandler","event","currentItem","newClouds","JSON","targetItem","dragEndHandler","setDragging","dropHandler","styleDraggingItem","clouds","isDragging","group","groupIndex","itemIndex","onDragStart","dragStartHandler","wordIndex","onDrop","data-dragging","draggable","word","sentence"],"mappings":"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","file":"static/js/3.461aaeac.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react'\nimport { styled } from 'linaria/react'\nimport Text from './Text'\nimport { TextT } from '../../types'\n\nconst TextContainer = styled.div`\n    background: transparent;\n    border: 1px solid #949494;\n    border-radius: 12px;\n    cursor: grab;\n`\n\nconst Word: React.FC<TextT> = ({ text }) => {\n    return (\n        <TextContainer>\n            <Text text={text} />\n        </TextContainer>\n    )\n}\n\nexport default Word\n","import React from 'react'\nimport { styled } from 'linaria/react'\n\nconst CloudArea = styled.div`\n    align-content: flex-start;\n    align-items: flex-start;\n    border-top: 1px solid #030303;\n    display: flex;\n    flex-wrap: wrap;\n    min-height: 100px;\n    padding-top: 6px;\n`\n\ntype CloudT = {\n    onDragEnter?: (event: React.DragEvent) => void\n}\n\nconst Cloud: React.FC<CloudT> = ({ onDragEnter, children }) => {\n    return <CloudArea onDragEnter={onDragEnter}>{children}</CloudArea>\n}\n\nexport default Cloud\n","import React from 'react'\nimport { styled } from 'linaria/react'\n\ntype ButtonT = {\n    onClick: () => void\n}\n\nconst PrimaryButton = styled.button`\n    background: #fff;\n    border: 1px solid #fff;\n    border-radius: 30px;\n    box-shadow: 5px 7px 10px rgba(0, 0, 0, 0.1);\n    font-size: medium;\n    font-weight: 600;\n    padding: 20px;\n    width: 100%;\n\n    &:active {\n        box-shadow: -5px -8px 10px rgba(0, 0, 0, 0.1);\n    }\n`\n\nconst Button: React.FC<ButtonT> = ({ onClick }) => {\n    return <PrimaryButton onClick={onClick}>Check</PrimaryButton>\n}\n\nexport default Button\n","import React, { useState } from 'react'\nimport { styled } from 'linaria/react'\nimport { observer } from 'mobx-react-lite'\nimport Text from '../atoms/Text'\nimport Button from '../atoms/Button'\nimport { store } from '../../stores/store'\n\nconst ButtonContainer = styled.div`\n    padding: 0 6px;\n    width: 100%;\n    margin-top: -32px;\n    transition: margin-top 0.5s ease;\n\n    &[data-status='show'] {\n        margin-top: 12px;\n    }\n`\n\nconst VerificationStatusContainer = styled.div`\n    display: flex;\n    font-weight: 600;\n    justify-content: center;\n    height: 30px;\n    margin-top: 12px;\n\n    &[data-color='red'] {\n        p {\n            color: #f31616;\n        }\n    }\n\n    &[data-color='green'] {\n        p {\n            color: #17d217;\n        }\n    }\n`\n\nconst ButtonWrapper = styled.div`\n    height: 120px;\n`\n\ntype CheckSentenceControls = {\n    setCurrentSentence: () => void\n}\n\nconst CheckSentenceControls: React.FC<CheckSentenceControls> = ({ setCurrentSentence }) => {\n    const [isWrong, setWrong] = useState<boolean>(false)\n    const [isCorrect, setCorrect] = useState<boolean>(false)\n\n    const checkSentence = () => {\n        setCurrentSentence()\n        if (store.currentSentence) {\n            if (store.sentenceToCheck !== store.currentSentence.en) {\n                setWrong(true)\n                setTimeout(() => setWrong(false), 3000)\n            }\n            if (store.sentenceToCheck === store.currentSentence.en) {\n                const utterThis = new SpeechSynthesisUtterance(store.sentenceToCheck)\n                utterThis.lang = 'en-US'\n                setCorrect(true)\n                setTimeout(() => setCorrect(false), 3000)\n                if (!speechSynthesis.speaking) {\n                    speechSynthesis.speak(utterThis)\n                }\n            }\n        }\n    }\n\n    return (\n        <ButtonWrapper>\n            <VerificationStatusContainer data-color={(isWrong && 'red') || (isCorrect && 'green')}>\n                {isWrong && <Text text={'Something is wrong!'} />}\n                {isCorrect && <Text text={'Correct!'} />}\n            </VerificationStatusContainer>\n            <ButtonContainer data-status={(isWrong || isCorrect) && 'show'}>\n                <Button onClick={checkSentence} />\n            </ButtonContainer>\n        </ButtonWrapper>\n    )\n}\n\nexport default observer(CheckSentenceControls)\n","import React, { useEffect, useRef, useState } from 'react'\nimport { styled } from 'linaria/react'\nimport { observer } from 'mobx-react-lite'\nimport Word from '../atoms/Word'\nimport Cloud from '../atoms/Cloud'\nimport CheckSentenceControls from '../molecules/CheckSentenceControls'\nimport { CloudInterface, DragItemT, OrderedArrayItemT } from '../../types'\nimport { store } from '../../stores/store'\n\nconst WordContainer = styled.div`\n    border-radius: 12px;\n    margin: 5px;\n\n    &[data-dragging='true'] {\n        background: #b2beb5;\n\n        p {\n            color: #b2beb5;\n        }\n    }\n    &[data-dragging='false'] {\n        background: #fff;\n    }\n`\n\nconst DragAndDropBlock: React.FC = () => {\n    const [isDragging, setDragging] = useState<boolean>(false)\n    const [clouds, setClouds] = useState<CloudInterface[]>([\n        { id: 'endCloud', words: [] },\n        { id: 'startCloud', words: [] },\n    ])\n\n    const dragItem = useRef<DragItemT | null>(null)\n    const dragNode = useRef<EventTarget | null>(null)\n\n    useEffect(() => {\n        if (store.currentSentence) {\n            setClouds([\n                { id: 'endCloud', words: [] },\n                { id: 'startCloud', words: store.orderedArray },\n            ])\n        }\n    }, [store.currentSentence])\n\n    const dragStartHandler = (event: React.DragEvent, targetItem: DragItemT) => {\n        dragItem.current = targetItem\n        dragNode.current = event.target\n        dragNode.current?.addEventListener('dragend', dragEndHandler)\n        setTimeout(() => {\n            setDragging(true)\n        }, 0)\n    }\n\n    const dragEnterHandler = (event: React.DragEvent, targetItem: DragItemT) => {\n        event.preventDefault()\n        const currentItem = dragItem.current\n        if (currentItem) {\n            if (event.target !== dragNode.current) {\n                setClouds((prevClouds: CloudInterface[] | undefined) => {\n                    const newClouds = JSON.parse(JSON.stringify(prevClouds))\n                    newClouds[targetItem.groupIndex].words.splice(\n                        targetItem.itemIndex,\n                        0,\n                        newClouds[currentItem.groupIndex].words.splice(currentItem.itemIndex, 1)[0]\n                    )\n                    dragItem.current = targetItem\n                    return newClouds\n                })\n            }\n        }\n    }\n\n    const dragEndHandler = () => {\n        setDragging(false)\n        dragNode.current?.removeEventListener('dragend', dragEndHandler)\n\n    }\n    const dropHandler = () => {\n        dragItem.current = null\n        dragNode.current = null\n    }\n\n    const setCurrentSentence = () => {\n        if (clouds && clouds[0].words) {\n            const sentence: string | undefined = clouds[0].words.map((word) => word.text).join(' ')\n            store.setSentenceToCheck(sentence)\n        }\n    }\n\n    const styleDraggingItem = (targetItem: DragItemT) => {\n        const currentItem = dragItem.current\n        if (currentItem?.groupIndex === targetItem.groupIndex && currentItem.itemIndex === targetItem.itemIndex) {\n            return 'true'\n        }\n        return 'false'\n    }\n\n    return (\n        <>\n            {clouds?.map((group: CloudInterface, groupIndex: number) => (\n                <Cloud\n                    onDragEnter={\n                        isDragging && !group.words?.length ? (event: React.DragEvent) =>\n                            dragEnterHandler(event, { groupIndex, itemIndex: 0, })\n                            :\n                            undefined\n                    }\n                    key={group.id}\n                >\n                    {group.words?.map((word: OrderedArrayItemT, wordIndex: number) => (\n                        <WordContainer\n                            onDragStart={(event: React.DragEvent) =>\n                                dragStartHandler(event, { groupIndex, itemIndex: wordIndex, })\n                            }\n                            onDragEnter={isDragging ? (event: React.DragEvent) =>\n                                dragEnterHandler(event, { groupIndex, itemIndex: wordIndex, }) : undefined\n                            }\n                            onDrop={dropHandler}\n                            key={word.text + word.order}\n                            data-dragging={isDragging ? styleDraggingItem({ groupIndex, itemIndex: wordIndex }) : 'false'}\n                            draggable\n                        >\n                            <Word text={word.text} />\n                        </WordContainer>\n                    ))}\n                </Cloud>\n            ))}\n            <CheckSentenceControls setCurrentSentence={setCurrentSentence} />\n        </>\n    )\n}\n\nexport default observer(DragAndDropBlock)\n"],"sourceRoot":""}
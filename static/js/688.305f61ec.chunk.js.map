{"version":3,"file":"static/js/688.305f61ec.chunk.js","mappings":"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","sources":["components/molecules/Word.tsx","services/mergeRefs.ts","utils/sortById.ts","components/molecules/Cloud.tsx","components/atoms/Button.tsx","components/molecules/CheckSentenceControls.tsx","hooks/usePrevious.ts","utils/calculateBoundingBoxes.ts","components/AnimateWords.tsx","components/organisms/DragDrop.tsx","utils/isTouchDevice.ts","webpack://my-app/./src/components/atoms/Button.tsx?f41e","webpack://my-app/./src/components/molecules/CheckSentenceControls.tsx?35c4","webpack://my-app/./src/components/molecules/Cloud.tsx?7830","webpack://my-app/./src/components/molecules/Word.tsx?fff4"],"sourcesContent":["import React, { forwardRef, useCallback, useRef } from 'react'\r\nimport { styled } from 'linaria/react'\r\nimport { useDrag, useDrop } from 'react-dnd'\r\nimport Text from '../atoms/Text'\r\nimport update from 'immutability-helper'\r\nimport mergeRefs from '../../services/mergeRefs'\r\nimport { store } from '../../stores/store'\r\nimport type { Identifier, XYCoord } from 'dnd-core'\r\nimport { DragItem, ItemT } from '../../types'\r\n\r\ntype StyleProps = {\r\n    isDragging: boolean\r\n}\r\n\r\nconst WordContainer = styled.div<StyleProps>`\r\n    background: #fff;\r\n    border: 1px solid #949494;\r\n    border-radius: 12px;\r\n    cursor: grab;\r\n    margin: 5px;\r\n    user-select: none;\r\n\r\n    opacity: ${(props) => (props.isDragging ? 0.5 : 1)};\r\n`\r\n\r\ninterface WordProps {\r\n    id: number\r\n    text: string\r\n    index: number\r\n    group?: 'start' | 'target'\r\n}\r\n\r\nconst Word = forwardRef<HTMLDivElement, WordProps>(function Word({ id, text, index, group }, ref) {\r\n    const localRef = useRef<HTMLDivElement>(null)\r\n\r\n    const moveWord = useCallback((dragIndex: number, hoverIndex: number) => {\r\n        store.setTargetWords(\r\n            update(store.targetWords, {\r\n                $splice: [\r\n                    [dragIndex, 1],\r\n                    [hoverIndex, 0, store.targetWords[dragIndex] as ItemT],\r\n                ],\r\n            })\r\n        )\r\n    }, [])\r\n\r\n    const [{ handlerId }, drop] = useDrop<DragItem, void, { handlerId: Identifier | null }>({\r\n        accept: 'word',\r\n        collect: (monitor) => {\r\n            return {\r\n                handlerId: monitor.getHandlerId(),\r\n            }\r\n        },\r\n        hover: (item: DragItem, monitor) => {\r\n            if (group === 'target' && item.group === 'target') {\r\n                if (!localRef.current) {\r\n                    return\r\n                }\r\n                const dragIndex = item.index\r\n                const hoverIndex = index\r\n\r\n                if (dragIndex === hoverIndex) {\r\n                    return\r\n                }\r\n\r\n                const hoverBoundingRect = localRef.current?.getBoundingClientRect()\r\n                const hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2\r\n                const clientOffset = monitor.getClientOffset()\r\n                const hoverClientX = (clientOffset as XYCoord).x - hoverBoundingRect.left\r\n\r\n                if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\r\n                    return\r\n                }\r\n\r\n                if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\r\n                    return\r\n                }\r\n\r\n                moveWord(dragIndex, hoverIndex)\r\n                item.index = hoverIndex\r\n            }\r\n        },\r\n    })\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        type: 'word',\r\n        item: () => {\r\n            return { id, index, group }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n    drag(drop(localRef))\r\n    return (\r\n        <WordContainer ref={mergeRefs([localRef, ref])} isDragging={isDragging} data-handler-id={handlerId}>\r\n            <Text text={text} />\r\n        </WordContainer>\r\n    )\r\n})\r\n\r\nexport default Word\r\n","import React from 'react'\r\n\r\nexport default function mergeRefs<T = never>(\r\n    refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\r\n): React.RefCallback<T> {\r\n    return (value) => {\r\n        refs.forEach((ref) => {\r\n            if (typeof ref === 'function') {\r\n                ref(value)\r\n            } else if (ref != null) {\r\n                ;(ref as React.MutableRefObject<T | null>).current = value\r\n            }\r\n        })\r\n    }\r\n}\r\n","import { ItemT } from '../types'\r\n\r\nexport const sortById = (wordA: ItemT, wordB: ItemT): number => {\r\n    if (wordA.id > wordB.id) {\r\n        return 1\r\n    }\r\n    if (wordA.id < wordB.id) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { styled } from 'linaria/react'\r\nimport { useDrop } from 'react-dnd'\r\nimport update from 'immutability-helper'\r\nimport { sortById } from '../../utils/sortById'\r\nimport { store } from '../../stores/store'\r\nimport { DragItem } from '../../types'\r\n\r\ninterface CloudProps {\r\n    group: 'start' | 'target'\r\n}\r\n\r\nconst CloudContainer = styled.div`\r\n    align-content: flex-start;\r\n    border-top: 1px solid #030303;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    min-height: 110px;\r\n    padding: 6px;\r\n`\r\n\r\nconst Cloud: React.FC<CloudProps> = ({ group, children }) => {\r\n    const moveWordToTargetGroup = useCallback((dragIndex: number) => {\r\n        store.setTargetWords(\r\n            update(store.targetWords, {\r\n                $push: [store.startWords[dragIndex]],\r\n            })\r\n        )\r\n        store.setStartWords(\r\n            update(store.startWords, {\r\n                $splice: [[dragIndex, 1]],\r\n            })\r\n        )\r\n    }, [])\r\n\r\n    const moveWordToStartGroup = useCallback((dragIndex: number) => {\r\n        store.setStartWords(\r\n            update(store.startWords, {\r\n                $push: [store.targetWords[dragIndex]],\r\n            })\r\n        )\r\n        store.setTargetWords(\r\n            update(store.targetWords, {\r\n                $splice: [[dragIndex, 1]],\r\n            })\r\n        )\r\n    }, [])\r\n\r\n    const [, drop] = useDrop<DragItem, void>({\r\n        accept: 'word',\r\n        drop: (item) => {\r\n            const dragIndex = item.index\r\n            if (group === 'target' && item.group === 'start') {\r\n                moveWordToTargetGroup(dragIndex)\r\n            }\r\n            if (group === 'start' && item.group === 'target') {\r\n                moveWordToStartGroup(dragIndex)\r\n                setTimeout(() => store.setStartWords([...store.startWords].sort(sortById)), 500)\r\n            }\r\n        },\r\n    })\r\n    return <CloudContainer ref={drop}>{children}</CloudContainer>\r\n}\r\n\r\nexport default Cloud\r\n","import React from 'react'\r\nimport { styled } from 'linaria/react'\r\n\r\ninterface ButtonProps {\r\n    onClick: () => void\r\n}\r\n\r\nconst PrimaryButton = styled.button`\r\n    background: #fff;\r\n    border: 1px solid #fff;\r\n    border-radius: 30px;\r\n    box-shadow: 5px 7px 10px rgba(0, 0, 0, 0.1);\r\n    font-size: medium;\r\n    font-weight: 600;\r\n    padding: 16px 0;\r\n    width: 100%;\r\n\r\n    &:active {\r\n        box-shadow: -5px -8px 10px rgba(0, 0, 0, 0.1);\r\n    }\r\n`\r\n\r\nconst Button: React.FC<ButtonProps> = ({ onClick }) => {\r\n    return <PrimaryButton onClick={onClick}>Check</PrimaryButton>\r\n}\r\n\r\nexport default Button\r\n","import React, { useState } from 'react'\r\nimport { styled } from 'linaria/react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport Text from '../atoms/Text'\r\nimport Button from '../atoms/Button'\r\nimport { store } from '../../stores/store'\r\n\r\ntype StyleProps = {\r\n    showStatus: boolean\r\n    isCorrect: boolean\r\n}\r\n\r\nconst CheckSentenceControlsContainer = styled.div`\r\n    height: 120px;\r\n    margin-top: 16px;\r\n`\r\n\r\nconst ButtonContainer = styled.div<Pick<StyleProps, 'showStatus'>>`\r\n    margin: -40px auto 0;\r\n    transform: translate3d(0, ${props => props.showStatus ? '50px' : '0'}, 0);\r\n    transition: transform 500ms ease;\r\n    width: 90%;\r\n`\r\n\r\nconst VerificationStatusContainer = styled.div<Pick<StyleProps, 'isCorrect'>>`\r\n    display: flex;\r\n    color: transparent;\r\n    font-weight: 600;\r\n    justify-content: center;\r\n\r\n    p {\r\n        color: ${(props) => (props.isCorrect ? '#17d217' : '#f31616')};\r\n    }\r\n`\r\n\r\nconst CheckSentenceControls: React.FC = () => {\r\n    const [isCorrect, setCorrect] = useState<boolean>(false)\r\n    const [showStatus, setShowStatus] = useState<boolean>(false)\r\n\r\n    const checkSentence = () => {\r\n        store.setSentenceToCheck()\r\n        if (store.sentenceToCheck !== store.currentSentence.en) {\r\n            setCorrect(false)\r\n        }\r\n        if (store.sentenceToCheck === store.currentSentence.en) {\r\n            const utterThis = new SpeechSynthesisUtterance(store.sentenceToCheck)\r\n            utterThis.lang = 'en-US'\r\n            setCorrect(true)\r\n            setTimeout(() => store.renderNewSentence(), 3000)\r\n            if (!speechSynthesis.speaking) {\r\n                speechSynthesis.speak(utterThis)\r\n            }\r\n        }\r\n        setShowStatus(true)\r\n        setTimeout(() => setShowStatus(false), 1500)\r\n    }\r\n\r\n    return (\r\n        <CheckSentenceControlsContainer>\r\n            <VerificationStatusContainer isCorrect={isCorrect}>\r\n                {isCorrect ? <Text text={'Correct!'} /> : <Text text={'Something is wrong!'} />}\r\n            </VerificationStatusContainer>\r\n            <ButtonContainer showStatus={showStatus}>\r\n                <Button onClick={checkSentence} />\r\n            </ButtonContainer>\r\n        </CheckSentenceControlsContainer>\r\n    )\r\n}\r\n\r\nexport default observer(CheckSentenceControls)\r\n","import { MutableRefObject, useEffect, useRef } from 'react'\r\n\r\nfunction usePrevious<T>(value: T): MutableRefObject<T | undefined>['current'] {\r\n    const ref = useRef<T>()\r\n    useEffect(() => {\r\n        ref.current = value\r\n    }, [value])\r\n    return ref.current\r\n}\r\n\r\nexport default usePrevious\r\n","import React from 'react'\r\nimport { DOMRectsObject } from '../types'\r\n\r\n//TODO типизировать\r\nconst calculateBoundingBoxes = (children: any) => {\r\n    const boundingBoxes: DOMRectsObject = {}\r\n    React.Children.map(children, (child) => {\r\n        const domNode = child.ref.current\r\n        boundingBoxes[child.key] = domNode.getBoundingClientRect()\r\n    })\r\n\r\n    return boundingBoxes\r\n}\r\n\r\nexport default calculateBoundingBoxes\r\n","import React, { useEffect, useLayoutEffect, useState } from 'react'\r\nimport usePrevious from '../hooks/usePrevious'\r\nimport calculateBoundingBoxes from '../utils/calculateBoundingBoxes'\r\nimport { DOMRectsObject } from '../types'\r\n\r\ninterface AnimateWordsProps {\r\n    //TODO типизировать\r\n    ({ children }: { children: any }): React.ReactElement\r\n}\r\n\r\nconst AnimateWords: AnimateWordsProps = ({ children }) => {\r\n    const prevChildren = usePrevious(children)\r\n    const [boundingBox, setBoundingBox] = useState<DOMRectsObject>({})\r\n    const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectsObject>({})\r\n\r\n    useLayoutEffect(() => {\r\n        setBoundingBox(calculateBoundingBoxes(children))\r\n    }, [children])\r\n\r\n    useLayoutEffect(() => {\r\n        if (prevChildren) {\r\n            setPrevBoundingBox(calculateBoundingBoxes(prevChildren))\r\n        }\r\n    }, [prevChildren])\r\n\r\n    useEffect(() => {\r\n        const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\r\n\r\n        React.Children.map(children, (child) => {\r\n            if (hasPrevBoundingBox) {\r\n                const domNode = child.ref.current\r\n                const firstBox = prevBoundingBox[child.key]\r\n                const lastBox = boundingBox[child.key]\r\n\r\n                if (firstBox && lastBox) {\r\n                    const changeInX = firstBox.left - lastBox.left\r\n                    const changeInY = firstBox.bottom - lastBox.bottom\r\n\r\n                    if (changeInX !== 0 || changeInY !== 0) {\r\n                        requestAnimationFrame(() => {\r\n                            domNode.style.transform = `translate3d(${changeInX}px, ${changeInY}px, 0)`\r\n                            domNode.style.transition = 'transform 0s'\r\n\r\n                            requestAnimationFrame(() => {\r\n                                domNode.style.transform = ''\r\n                                domNode.style.transition = 'transform 500ms'\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }, [boundingBox, prevBoundingBox, children])\r\n    return children\r\n}\r\n\r\nexport default AnimateWords\r\n","import React, { createRef, useCallback } from 'react'\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport { observer } from 'mobx-react-lite'\r\nimport Word from '../molecules/Word'\r\nimport Cloud from '../molecules/Cloud'\r\nimport CheckSentenceControls from '../molecules/CheckSentenceControls'\r\nimport AnimateWords from '../AnimateWords'\r\nimport { isTouchDevice } from '../../utils/isTouchDevice'\r\nimport { store } from '../../stores/store'\r\nimport { ItemT } from '../../types'\r\n\r\nconst DragAndDrop: React.FC = () => {\r\n    const isTouchScreen = isTouchDevice() ? TouchBackend : HTML5Backend\r\n    const renderWord = useCallback((word: ItemT, index: number, group?: 'start' | 'target') => {\r\n        return (\r\n            <Word\r\n                key={word.id + word.text}\r\n                id={word.id}\r\n                text={word.text}\r\n                index={index}\r\n                group={group}\r\n                ref={createRef<HTMLDivElement>()}\r\n            />\r\n        )\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <DndProvider backend={isTouchScreen}>\r\n                <Cloud group={'target'}>\r\n                    {store.targetWords?.map((word: ItemT, index: number) => renderWord(word, index, 'target'))}\r\n                </Cloud>\r\n                <Cloud group={'start'}>\r\n                    <AnimateWords>\r\n                        {store.startWords?.map((word: ItemT, index: number) => renderWord(word, index, 'start'))}\r\n                    </AnimateWords>\r\n                </Cloud>\r\n            </DndProvider>\r\n            <CheckSentenceControls />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(DragAndDrop)\r\n","export const isTouchDevice = () => {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["WordContainer","props","isDragging","forwardRef","ref","refs","id","text","index","group","localRef","useRef","moveWord","useCallback","dragIndex","hoverIndex","store","update","$splice","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","item","current","hoverBoundingRect","getBoundingClientRect","hoverMiddleX","right","left","hoverClientX","getClientOffset","x","drop","useDrag","type","drag","value","forEach","Text","sortById","wordA","wordB","CloudContainer","children","moveWordToTargetGroup","$push","moveWordToStartGroup","setTimeout","sort","PrimaryButton","onClick","CheckSentenceControlsContainer","ButtonContainer","showStatus","VerificationStatusContainer","isCorrect","observer","useState","setCorrect","setShowStatus","utterThis","SpeechSynthesisUtterance","lang","speechSynthesis","speaking","speak","useEffect","boundingBoxes","React","child","domNode","key","prevChildren","usePrevious","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","useLayoutEffect","calculateBoundingBoxes","hasPrevBoundingBox","Object","keys","length","firstBox","lastBox","changeInX","changeInY","bottom","requestAnimationFrame","style","transform","transition","isTouchScreen","window","navigator","maxTouchPoints","TouchBackend","HTML5Backend","renderWord","word","createRef","DndProvider","backend","map"],"sourceRoot":""}
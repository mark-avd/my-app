{"version":3,"sources":["utils/mock.ts","assets/person-icon.svg","components/atoms/Icon.tsx","components/atoms/Text.tsx","components/molecules/SentenceBubble.tsx","components/molecules/TranslatedSentence.tsx","components/atoms/Word.tsx","components/atoms/Button.tsx","utils/utils.ts","components/organisms/TestDND.tsx","components/organisms/CheckSentenceBlock.tsx","pages/HomePage.tsx","App.tsx","index.tsx"],"names":["Languages","Icon","type","src","personIcon","alt","BaseText","text","mockSentences","eng","ru","Bubble","sentenceIndex","sentence","IconContainer","BubbleContainer","TranslatedSentenceContainer","WordContainer","PrimaryButton","onClick","shuffleArray","array","i","length","j","Math","floor","random","makeOrderedArray","wordsArray","orderedArray","map","word","index","push","order","Cloud","ButtonContainer","VerificationStatus","ButtonWrapper","useState","dragItem","useRef","dragNode","useEffect","setClouds","id","words","dragEnterHandler","event","currentItem","prevClouds","newClouds","JSON","params","dragEndHandler","setDragging","styleDraggingItem","clouds","onDragEnter","isDragging","grp","grpI","itemI","onDragStart","setWrong","setCorrect","setTimeout","dragStartHandler","data-dragging","draggable","item","data-color","isWrong","isCorrect","data-status","utterThis","SpeechSynthesisUtterance","speechSynthesis","CheckSentenceBlockContainer","Heading","HomePage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85a08ee0.chunk.js","sourcesContent":["enum Languages {\n    english = 'eng',\n    russian = 'ru'\n}\n\ntype sentenceObject = {\n    [key in Languages]: string\n}\n\nexport const mockSentences: sentenceObject[] = [\n    {\n        eng: 'Scaling to many files and components',\n        ru: 'Масштабирование до большого количества файлов и компонентов'\n    },\n    {\n        eng: 'You can upgrade to React18 with minimal or no changes to your application code',\n        ru: 'Вы можете перейти на React18 с минимальными изменениями или вообще без изменений в коде вашего приложения'\n    }\n]\n","export default __webpack_public_path__ + \"static/media/person-icon.7be7c8cd.svg\";","import React from 'react'\nimport personIcon from '../../assets/person-icon.svg'\n\ninterface Icon {\n    type: 'person'\n}\n\nconst Icon: React.FC<Icon> = ({ type }) => {\n    return <>{type === 'person' && <img src={personIcon} alt={'person icon'} />}</>\n}\n\nexport default Icon\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { TextInterface } from '../../types'\n\nconst BaseText = styled.p`\n    padding: 6px 8px;\n`\n\nconst Text: React.FC<TextInterface> = ({ text }) => {\n    return <BaseText>{text}</BaseText>\n}\n\nexport default Text\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport Text from '../atoms/Text'\nimport { SentenceIndexT } from '../../types'\nimport { mockSentences } from '../../utils/mock'\n\nconst Bubble = styled.div`\n    background: #ffffff;\n    border: #030303 solid 1px;\n    border-radius: 13px 13px 13px 8px;\n    padding: 6px;\n    position: relative;\n    width: 100%;\n\n    &:after {\n        content: '';\n        position: absolute;\n        border-color: transparent #ffffff;\n        border-style: solid;\n        border-width: 15px 15px 0 0;\n        left: -15px;\n        top: 80%;\n        margin-top: -10px;\n        z-index: 1;\n    }\n\n    &:before {\n        content: '';\n        position: absolute;\n        border-color: transparent #030303;\n        border-style: solid;\n        border-width: 16px 16px 0 0;\n        left: -17px;\n        top: 80%;\n        margin-top: -10px;\n        z-index: 0;\n    }\n`\nconst SentenceBubble: React.FC<SentenceIndexT> = ({ sentenceIndex }) => {\n    const sentence = mockSentences[sentenceIndex].ru\n    return (\n        <Bubble>\n            <Text text={sentence} />\n        </Bubble>\n    )\n}\n\nexport default SentenceBubble\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport Icon from '../atoms/Icon'\nimport SentenceBubble from './SentenceBubble'\nimport { SentenceIndexT } from '../../types'\n\nconst IconContainer = styled.div`\n  width: 40%;\n\n  img {\n    border-radius: 14px;\n    width: 100%;\n  }\n`\n\nconst BubbleContainer = styled.div`\n  margin-left: 12px;\n  width: 60%;\n`\n\nconst TranslatedSentenceContainer = styled.div`\n  display: flex;\n  margin-top: 16px;\n`\n\nconst TranslatedSentence: React.FC<SentenceIndexT> = ({ sentenceIndex }) => {\n    return (\n        <TranslatedSentenceContainer>\n            <IconContainer>\n                <Icon type={'person'} />\n            </IconContainer>\n            <BubbleContainer>\n                <SentenceBubble sentenceIndex={sentenceIndex} />\n            </BubbleContainer>\n        </TranslatedSentenceContainer>\n    )\n}\n\nexport default TranslatedSentence\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { TextInterface } from '../../types'\nimport Text from './Text'\n\nconst WordContainer = styled.div`\n    background: transparent;\n    border: 1px solid #949494;\n    border-radius: 12px;\n    cursor: grab;\n`\n\nconst Word: React.FC<TextInterface> = ({ text }) => {\n    return (\n        <WordContainer>\n            <Text text={text} />\n        </WordContainer>\n    )\n}\n\nexport default Word\n","import React from 'react'\nimport { styled } from 'linaria/react'\n\ntype ButtonT = {\n    onClick: () => void\n}\n\nconst PrimaryButton = styled.button`\n    background: #fff;\n    border: 1px solid #fff;\n    border-radius: 30px;\n    box-shadow: 5px 7px 10px rgba(0, 0, 0, 0.1);\n    font-size: medium;\n    font-weight: 600;\n    padding: 20px;\n    width: 100%;\n\n    &:active {\n        box-shadow: -5px -8px 10px rgba(0, 0, 0, 0.1);\n    }\n`\n\nconst Button: React.FC<ButtonT> = ({ onClick }) => {\n    return <PrimaryButton onClick={onClick}>Check</PrimaryButton>\n}\n\nexport default Button\n","import { OrderedArrayItemT } from '../types'\r\n\r\nexport const shuffleArray = (array: string[]): string[] => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1))\r\n        ;[array[i], array[j]] = [array[j], array[i]]\r\n    }\r\n    return array\r\n}\r\n\r\nexport const makeOrderedArray = (wordsArray: string[]): OrderedArrayItemT[] => {\r\n    const orderedArray: OrderedArrayItemT[] = []\r\n    wordsArray.map((word, index) => {\r\n        orderedArray.push({text: word, order: index})\r\n    })\r\n    return orderedArray\r\n}\r\n\r\nexport const sortByOrder = (wordA: OrderedArrayItemT, wordB: OrderedArrayItemT): number => {\r\n    if (wordA.order > wordB.order) {\r\n        return 1\r\n    }\r\n    if (wordA.order < wordB.order) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\nimport { styled } from 'linaria/react'\nimport Text from '../atoms/Text'\nimport Word from '../atoms/Word'\nimport Button from '../atoms/Button'\nimport { CloudInterface, SentenceIndexT } from '../../types'\nimport { makeOrderedArray, shuffleArray } from '../../utils/utils'\nimport { mockSentences } from '../../utils/mock'\n\nconst Cloud = styled.div`\n    align-content: flex-start;\n    align-items: flex-start;\n    border-top: 1px solid #030303;\n    display: flex;\n    flex-wrap: wrap;\n    min-height: 100px;\n    padding-top: 6px;\n`\n\nconst WordContainer = styled.div`\n    border-radius: 12px;\n    margin: 5px;\n\n    &[data-dragging='true'] {\n        background: #b2beb5;\n\n        p {\n            color: #b2beb5;\n        }\n    }\n\n    &[data-dragging='false'] {\n        background: #fff;\n    }\n`\n\nconst ButtonContainer = styled.div`\n    padding: 0 6px;\n    width: 100%;\n    margin-top: -32px;\n    transition: margin-top 0.5s ease;\n\n    &[data-status='show'] {\n        margin-top: 12px;\n    }\n`\n\nconst VerificationStatus = styled.div`\n    display: flex;\n    font-weight: 600;\n    justify-content: center;\n    height: 30px;\n    margin-top: 12px;\n\n    &[data-color='red'] {\n        p {\n            color: #f31616;\n        }\n    }\n\n    &[data-color='green'] {\n        p {\n            color: #17d217;\n        }\n    }\n`\n\nconst ButtonWrapper = styled.div`\n    height: 120px;\n`\n\nconst TestDND: React.FC<SentenceIndexT> = ({ sentenceIndex }) => {\n    const [isWrong, setWrong] = useState<boolean>(false)\n    const [isCorrect, setCorrect] = useState<boolean>(false)\n\n    const [clouds, setClouds] = useState<CloudInterface[]>()\n    const [isDragging, setDragging] = useState<boolean>(false)\n\n    const dragItem = useRef<any | null>(null)\n    const dragNode = useRef<EventTarget | null>(null)\n\n    useEffect(() => {\n        const wordsArray: string[] = mockSentences[sentenceIndex].eng.split(' ')\n        setClouds([\n            { id: 0, words: [] },\n            { id: 1, words: makeOrderedArray(shuffleArray(wordsArray)) },\n        ])\n    }, [sentenceIndex])\n\n    const dragStartHandler = (event: React.DragEvent, params: any) => {\n        setWrong(false)\n        setCorrect(false)\n        dragItem.current = params\n        dragNode.current = event.target\n        dragNode.current?.addEventListener('dragend', dragEndHandler)\n        setTimeout(() => {\n            setDragging(true)\n        }, 0)\n    }\n\n    const dragEnterHandler = (event: React.DragEvent, params: any) => {\n        event.preventDefault()\n        const currentItem = dragItem.current\n        if (event.target !== dragNode.current) {\n            setClouds((prevClouds) => {\n                const newClouds = JSON.parse(JSON.stringify(prevClouds))\n                newClouds[params.grpI].words.splice(\n                    params.itemI,\n                    0,\n                    newClouds[currentItem.grpI].words.splice(currentItem.itemI, 1)[0]\n                )\n                dragItem.current = params\n                return newClouds\n            })\n        }\n    }\n\n    const dragEndHandler = () => {\n        setDragging(false)\n        dragNode.current?.removeEventListener('dragend', dragEndHandler)\n        dragItem.current = null\n        dragNode.current = null\n    }\n\n    const checkSentence = () => {\n        if (clouds && clouds[0].words) {\n            const sentence: string | undefined = clouds[0].words.map((word) => word.text).join(' ')\n            if (sentence !== mockSentences[sentenceIndex].eng) {\n                setWrong(true)\n            }\n            if (sentence === mockSentences[sentenceIndex].eng) {\n                const utterThis = new SpeechSynthesisUtterance(sentence)\n                utterThis.lang = 'en-US'\n                setCorrect(true)\n                if (!speechSynthesis.speaking) {\n                    speechSynthesis.speak(utterThis)\n                }\n            }\n        }\n    }\n\n    const styleDraggingItem = (params: any) => {\n        const currentItem = dragItem.current\n        if (currentItem.grpI === params.grpI && currentItem.itemI === params.itemI) {\n            return 'true'\n        }\n        return 'false'\n    }\n\n    return (\n        <>\n            {clouds?.map((grp, grpI) => (\n                <Cloud\n                    onDragEnter={\n                        isDragging && !grp.words?.length\n                            ? (event: React.DragEvent) =>\n                                  dragEnterHandler(event, {\n                                      grpI,\n                                      itemI: 0,\n                                  })\n                            : undefined\n                    }\n                    key={grp.id}\n                >\n                    {grp.words?.map((item, itemI) => (\n                        <WordContainer\n                            onDragStart={(event: React.DragEvent) => dragStartHandler(event, { grpI, itemI })}\n                            onDragEnter={\n                                isDragging\n                                    ? (event: React.DragEvent) =>\n                                          dragEnterHandler(event, {\n                                              grpI,\n                                              itemI,\n                                          })\n                                    : undefined\n                            }\n                            key={item.text + item.order}\n                            data-dragging={isDragging ? styleDraggingItem({ grpI, itemI }) : 'false'}\n                            draggable\n                        >\n                            <Word text={item.text} />\n                        </WordContainer>\n                    ))}\n                </Cloud>\n            ))}\n\n            <ButtonWrapper>\n                <VerificationStatus data-color={(isWrong && 'red') || (isCorrect && 'green')}>\n                    {isWrong && <Text text={'Something is wrong!'} />}\n                    {isCorrect && <Text text={'Correct!'} />}\n                </VerificationStatus>\n                <ButtonContainer data-status={(isWrong || isCorrect) && 'show'}>\n                    <Button onClick={checkSentence} />\n                </ButtonContainer>\n            </ButtonWrapper>\n        </>\n    )\n}\n\nexport default TestDND\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport TranslatedSentence from '../molecules/TranslatedSentence'\nimport TestDND from './TestDND'\n\nconst CheckSentenceBlockContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 auto;\n  height: 100vh;\n  width: 32vw;\n`\n\nconst Heading = styled.h1`\n  font-weight: 500;\n  margin-bottom: 24px;\n`\n\nconst TranslatedSentenceContainer = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CheckSentenceBlock: React.FC = () => {\n    const sentenceIndex = Math.floor(Math.random() * 2)\n    return (\n        <CheckSentenceBlockContainer>\n            <Heading>Translate this sentence</Heading>\n            <TranslatedSentenceContainer>\n                <TranslatedSentence sentenceIndex={sentenceIndex} />\n            </TranslatedSentenceContainer>\n            <TestDND sentenceIndex={sentenceIndex} />\n        </CheckSentenceBlockContainer>\n    )\n}\n\nexport default CheckSentenceBlock\n","import React from 'react'\nimport CheckSentenceBlock from '../components/organisms/CheckSentenceBlock'\n\nconst HomePage: React.FC = () => {\n    return <CheckSentenceBlock />\n}\n\nexport default HomePage\n","import React from 'react'\nimport HomePage from './pages/HomePage'\nimport './App.css'\n\nfunction App(): React.ReactElement {\n    return (\n        <>\n            <HomePage />\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}
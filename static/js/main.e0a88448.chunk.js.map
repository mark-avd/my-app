{"version":3,"sources":["services/api.ts","stores/store.ts","services/utils.ts","components/atoms/Text.tsx","assets/person-icon.svg","assets/loading-icon.svg","components/atoms/Icon.tsx","components/molecules/Bubble.tsx","components/molecules/SentencePreview.tsx","pages/MainPage.tsx","App.tsx","index.tsx"],"names":["fetchGraphQL","a","fetch","method","headers","body","JSON","stringify","query","variables","response","json","store","sentences","currentSentence","sentenceToCheck","responseStatus","error","makeAutoObservable","this","runInAction","fetchSentences","then","setCurrenSentence","wordsArray","orderedArray","map","word","index","push","text","order","makeOrderedArray","array","i","length","j","Math","floor","random","shuffleArray","en","split","randomSentenceIndex","sentence","data","sentenceAll","TextContainer","Icon","type","src","personIcon","alt","loadingIcon","TextCloud","SentencePreviewContainer","IconContainer","BubbleContainer","observer","DragAndDropBlock","React","Container","Heading","TranslatedSentenceContainer","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAEO,SAAeA,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACoBC,MAAM,uCAAwC,CACjEC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,MAAM,+KAQNC,UAAW,OAfhB,cACGC,EADH,gBAkBUA,EAASC,OAlBnB,oF,0BCsDMC,EAAQ,I,WA3CjB,aAAe,IAAD,gCAPdC,UAA8B,GAOhB,KANdC,qBAMc,OALdC,qBAKc,OAHdC,oBAGc,OAFdC,WAEc,EACVC,YAAmBC,MACnBC,aAAY,kBAAM,EAAKC,iBAAiBC,MAAK,kBAAM,EAAKC,0BAAsBD,O,8CAGlF,WACI,GAAIH,KAAKL,gBAEL,OCXoB,SAACU,GAC7B,IAAMC,EAAoC,GAI1C,OAHAD,EAAWE,KAAI,SAACC,EAAMC,GAClBH,EAAaI,KAAK,CAAEC,KAAMH,EAAMI,MAAOH,OAEpCH,EDMQO,CCnBS,SAACC,GACzB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEf,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAF+B,KAE3BD,EAAMG,GAFqB,KAI3C,OAAOH,EDcyBO,CADLrB,KAAKL,gBAAgB2B,GAAGC,MAAM,S,+BAKzD,WACI,IAAMC,EAAsBN,KAAKC,MAAMD,KAAKE,SAAWpB,KAAKN,UAAUsB,QACtEhB,KAAKL,gBAAkBK,KAAKN,UAAU8B,K,0BAG1C,SAAa9B,GACTM,KAAKN,UAAYA,I,gCAGrB,SAAmB+B,GACfzB,KAAKJ,gBAAkB6B,I,mEAG3B,mCAAA3C,EAAA,6DACIkB,KAAKH,eAAiB,UAD1B,kBAI+BhB,IAJ/B,OAIcU,EAJd,OAKQU,aAAY,WACR,EAAKP,UAAYH,EAASmC,KAAKC,YAC/B,EAAK9B,eAAiB,UAPlC,gDAUQI,aAAY,WACR,EAAKH,MAAL,KACA,EAAKD,eAAiB,WAZlC,yD,4FEtCJ,uBAIM+B,EAAa,yDAQnB,IAJ8B,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KAC7B,OAAO,0BAAP,K,gMCTW,MAA0B,wCCA1B,MAA0B,yC,OCiB1BkB,EATc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC5B,OACI,qCACc,WAATA,GAAqB,qBAAKC,IAAKC,EAAYC,IAAK,gBACvC,YAATH,GAAsB,qBAAKC,IAAKG,EAAaD,IAAK,qB,QCPzDE,EAAS,wDAyCf,EARgC,SAAC,GAAc,IAAZxB,EAAW,EAAXA,KAC/B,OACI,0BACI,mBAAMA,KAAN,O,iBClCNyB,EAAwB,uEAKxBC,EAAa,4DASbC,EAAe,6DAkBNC,eAbmB,WAAO,IAAD,EACpC,OACI,4BACI,0BACI,iBAAMT,KAAN,aAEJ,0BACI,iBAAQnB,KAAMlB,8BAAwBA,2BAAxBA,aAAwBA,EAAxBA,GAAd,a,MC3BhB,IAAM+C,EAAmBC,UAAW,kBAAM,gCAEpCC,EAAS,wDASTC,EAAO,oDAKPC,EAA2B,yEAI3BP,EAAa,2DAwBJE,eApBY,WACvB,OACI,4BACI,sDACA,0BACI,sBAEJ,cAAC,IAAD,UACIM,SACI,0BACI,iBAAMf,KAAN,cAHZ,SAOI,4B,YChChB,MARA,WACI,OACI,mCACI,uBCHZgB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.e0a88448.chunk.js","sourcesContent":["import { SentenceAllResponse } from '../types'\n\nexport async function fetchGraphQL(): Promise<SentenceAllResponse> {\n    const response = await fetch('https://academtest.ilink.dev/graphql', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            query: `\n                query {\n                    sentenceAll {\n                        ru\n                        en\n                    }\n                }\n            `,\n            variables: {},\n        }),\n    })\n    return await response.json()\n}\n","import { makeAutoObservable, runInAction } from 'mobx'\nimport { makeOrderedArray, shuffleArray } from '../services/utils'\nimport { fetchGraphQL } from '../services/api'\nimport { SentenceObject } from '../types'\n\nclass Store {\n    sentences: SentenceObject[] = []\n    currentSentence: SentenceObject | undefined\n    sentenceToCheck: string | undefined\n\n    responseStatus: string | undefined\n    error: any\n\n    constructor() {\n        makeAutoObservable(this)\n        runInAction(() => this.fetchSentences().then(() => this.setCurrenSentence())).then()\n    }\n\n    get orderedArray() {\n        if (this.currentSentence) {\n            const wordsArray = this.currentSentence.en.split(' ')\n            return makeOrderedArray(shuffleArray(wordsArray))\n        }\n    }\n\n    setCurrenSentence() {\n        const randomSentenceIndex = Math.floor(Math.random() * this.sentences.length)\n        this.currentSentence = this.sentences[randomSentenceIndex]\n    }\n\n    setSentences(sentences: SentenceObject[]) {\n        this.sentences = sentences\n    }\n\n    setSentenceToCheck(sentence: string) {\n        this.sentenceToCheck = sentence\n    }\n\n    async fetchSentences() {\n        this.responseStatus = 'pending'\n\n        try {\n            const response = await fetchGraphQL()\n            runInAction(() => {\n                this.sentences = response.data.sentenceAll\n                this.responseStatus = 'done'\n            })\n        } catch (error: any) {\n            runInAction(() => {\n                this.error = error\n                this.responseStatus = 'error'\n            })\n        }\n    }\n}\n\nexport const store = new Store()\n","import { OrderedArrayItemT } from '../types'\n\nexport const shuffleArray = (array: string[]): string[] => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1))\n        ;[array[i], array[j]] = [array[j], array[i]]\n    }\n    return array\n}\n\nexport const makeOrderedArray = (wordsArray: string[]): OrderedArrayItemT[] => {\n    const orderedArray: OrderedArrayItemT[] = []\n    wordsArray.map((word, index) => {\n        orderedArray.push({ text: word, order: index })\n    })\n    return orderedArray\n}\n\nexport const sortByOrder = (wordA: OrderedArrayItemT, wordB: OrderedArrayItemT): number => {\n    if (wordA.order > wordB.order) {\n        return 1\n    }\n    if (wordA.order < wordB.order) {\n        return -1\n    }\n    return 0\n}\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { TextT } from '../../types'\n\nconst TextContainer = styled.p`\n    padding: 6px 8px;\n`\n\nconst Text: React.FC<TextT> = ({ text }) => {\n    return <TextContainer>{text}</TextContainer>\n}\n\nexport default Text\n","export default __webpack_public_path__ + \"static/media/person-icon.7be7c8cd.svg\";","export default __webpack_public_path__ + \"static/media/loading-icon.a8bc9737.svg\";","import React from 'react'\nimport personIcon from '../../assets/person-icon.svg'\nimport loadingIcon from '../../assets/loading-icon.svg'\n\ninterface Icon {\n    type: 'person' | 'loading'\n}\n\nconst Icon: React.FC<Icon> = ({ type }) => {\n    return (\n        <>\n            {type === 'person' && <img src={personIcon} alt={'person icon'} />}\n            {type === 'loading' && <img src={loadingIcon} alt={'loading icon'} />}\n        </>\n    )\n}\n\nexport default Icon\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport Text from '../atoms/Text'\nimport { TextT } from '../../types'\n\nconst TextCloud = styled.div`\n    background: #ffffff;\n    border: #030303 solid 1px;\n    border-radius: 13px 13px 13px 8px;\n    padding: 6px;\n    position: relative;\n    width: 100%;\n\n    &:after {\n        content: '';\n        position: absolute;\n        border-color: transparent #ffffff;\n        border-style: solid;\n        border-width: 15px 15px 0 0;\n        left: -15px;\n        top: 80%;\n        margin-top: -10px;\n        z-index: 1;\n    }\n\n    &:before {\n        content: '';\n        position: absolute;\n        border-color: transparent #030303;\n        border-style: solid;\n        border-width: 16px 16px 0 0;\n        left: -17px;\n        top: 80%;\n        margin-top: -10px;\n        z-index: 0;\n    }\n`\n\nconst Bubble: React.FC<TextT> = ({ text }) => {\n    return (\n        <TextCloud>\n            <Text text={text} />\n        </TextCloud>\n    )\n}\n\nexport default Bubble\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { observer } from 'mobx-react-lite'\nimport Icon from '../atoms/Icon'\nimport Bubble from './Bubble'\nimport { store } from '../../stores/store'\n\nconst SentencePreviewContainer = styled.div`\n    display: flex;\n    margin-top: 16px;\n`\n\nconst IconContainer = styled.div`\n    width: 40%;\n\n    img {\n        border-radius: 14px;\n        width: 100%;\n    }\n`\n\nconst BubbleContainer = styled.div`\n    margin-left: 12px;\n    width: 60%;\n`\n\nconst SentencePreview: React.FC = () => {\n    return (\n        <SentencePreviewContainer>\n            <IconContainer>\n                <Icon type={'person'} />\n            </IconContainer>\n            <BubbleContainer>\n                <Bubble text={store.currentSentence ? store.currentSentence?.ru : ''} />\n            </BubbleContainer>\n        </SentencePreviewContainer>\n    )\n}\n\nexport default observer(SentencePreview)\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { observer } from 'mobx-react-lite'\nimport Icon from '../components/atoms/Icon'\nimport SentenceToTranslateBlock from '../components/molecules/SentencePreview'\n\nconst DragAndDropBlock = React.lazy(() => import('../components/organisms/DragAndDropBlock'))\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0 auto;\n    height: 100vh;\n    width: 32vw;\n`\n\nconst Heading = styled.h1`\n    font-weight: 500;\n    margin-bottom: 24px;\n`\n\nconst TranslatedSentenceContainer = styled.div`\n    margin-bottom: 24px;\n`\n\nconst IconContainer = styled.div`\n    margin: 0 auto;\n`\n\nconst MainPage: React.FC = () => {\n    return (\n        <Container>\n            <Heading>Translate this sentence</Heading>\n            <TranslatedSentenceContainer>\n                <SentenceToTranslateBlock />\n            </TranslatedSentenceContainer>\n            <React.Suspense\n                fallback={\n                    <IconContainer>\n                        <Icon type={'loading'} />\n                    </IconContainer>\n                }\n            >\n                <DragAndDropBlock />\n            </React.Suspense>\n        </Container>\n    )\n}\n\nexport default observer(MainPage)\n","import React from 'react'\nimport HomePage from './pages/MainPage'\nimport './App.css'\n\nfunction App(): React.ReactElement {\n    return (\n        <>\n            <HomePage />\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}
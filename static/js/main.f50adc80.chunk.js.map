{"version":3,"sources":["utils/mock.ts","assets/person-icon.svg","components/atoms/Icon.tsx","components/atoms/Text.tsx","components/molecules/SentenceBubble.tsx","components/molecules/TranslatedSentence.tsx","components/atoms/Word.tsx","components/atoms/Button.tsx","utils/utils.ts","components/organisms/DragAndDropArea.tsx","components/organisms/CheckSentenceBlock.tsx","pages/HomePage.tsx","App.tsx","index.tsx"],"names":["Languages","Icon","type","src","personIcon","alt","BaseText","text","mockSentences","eng","ru","Bubble","sentenceIndex","sentence","IconContainer","BubbleContainer","TranslatedSentenceContainer","WordContainer","PrimaryButton","onClick","shuffleArray","array","i","length","j","Math","floor","random","makeOrderedArray","wordsArray","orderedArray","map","word","index","push","order","sortByOrder","wordA","wordB","Cloud","ButtonContainer","VerificationStatus","ButtonWrapper","useState","useEffect","setClouds","id","words","dragEndHandler","event","dragOverHandler","clouds","onDragOver","onDrop","currentWord","currentCloud","cloud","currentIndex","c","dropCloudHandler","onDragStart","setCurrentWord","setCurrentCloud","setWrong","setCorrect","dragStartHandler","onDragLeave","onDragEnd","dropIndex","dropHandler","draggable","data-color","isWrong","isCorrect","data-status","utterThis","SpeechSynthesisUtterance","speechSynthesis","CheckSentenceBlockContainer","Heading","HomePage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f50adc80.chunk.js","sourcesContent":["enum Languages {\n    english = 'eng',\n    russian = 'ru'\n}\n\ntype sentenceObject = {\n    [key in Languages]: string\n}\n\nexport const mockSentences: sentenceObject[] = [\n    {\n        eng: 'Scaling to many files and components',\n        ru: 'Масштабирование до большого количества файлов и компонентов'\n    },\n    {\n        eng: 'You can upgrade to React18 with minimal or no changes to your application code',\n        ru: 'Вы можете перейти на React18 с минимальными изменениями или вообще без изменений в коде вашего приложения'\n    }\n]\n","export default __webpack_public_path__ + \"static/media/person-icon.7be7c8cd.svg\";","import React from 'react'\nimport personIcon from '../../assets/person-icon.svg'\n\ninterface Icon {\n    type: 'person'\n}\n\nconst Icon: React.FC<Icon> = ({ type }) => {\n    return <>{type === 'person' && <img src={personIcon} alt={'person icon'} />}</>\n}\n\nexport default Icon\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { TextInterface } from '../../types'\n\nconst BaseText = styled.p`\n    padding: 6px 8px;\n`\n\nconst Text: React.FC<TextInterface> = ({ text }) => {\n    return <BaseText>{text}</BaseText>\n}\n\nexport default Text\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport Text from '../atoms/Text'\nimport { SentenceIndexT } from '../../types'\nimport { mockSentences } from '../../utils/mock'\n\nconst Bubble = styled.div`\n    background: #ffffff;\n    border: #030303 solid 1px;\n    border-radius: 13px 13px 13px 8px;\n    padding: 6px;\n    position: relative;\n    width: 100%;\n\n    &:after {\n        content: '';\n        position: absolute;\n        border-color: transparent #ffffff;\n        border-style: solid;\n        border-width: 15px 15px 0 0;\n        left: -15px;\n        top: 80%;\n        margin-top: -10px;\n        z-index: 1;\n    }\n\n    &:before {\n        content: '';\n        position: absolute;\n        border-color: transparent #030303;\n        border-style: solid;\n        border-width: 16px 16px 0 0;\n        left: -17px;\n        top: 80%;\n        margin-top: -10px;\n        z-index: 0;\n    }\n`\nconst SentenceBubble: React.FC<SentenceIndexT> = ({ sentenceIndex }) => {\n    const sentence = mockSentences[sentenceIndex].ru\n    return (\n        <Bubble>\n            <Text text={sentence} />\n        </Bubble>\n    )\n}\n\nexport default SentenceBubble\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport Icon from '../atoms/Icon'\nimport SentenceBubble from './SentenceBubble'\nimport { SentenceIndexT } from '../../types'\n\nconst IconContainer = styled.div`\n  width: 40%;\n\n  img {\n    border-radius: 14px;\n    width: 100%;\n  }\n`\n\nconst BubbleContainer = styled.div`\n  margin-left: 12px;\n  width: 60%;\n`\n\nconst TranslatedSentenceContainer = styled.div`\n  display: flex;\n  margin-top: 16px;\n`\n\nconst TranslatedSentence: React.FC<SentenceIndexT> = ({ sentenceIndex }) => {\n    return (\n        <TranslatedSentenceContainer>\n            <IconContainer>\n                <Icon type={'person'} />\n            </IconContainer>\n            <BubbleContainer>\n                <SentenceBubble sentenceIndex={sentenceIndex} />\n            </BubbleContainer>\n        </TranslatedSentenceContainer>\n    )\n}\n\nexport default TranslatedSentence\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport { TextInterface } from '../../types'\nimport Text from './Text'\n\nconst WordContainer = styled.div`\n    background: #fff;\n    border: 1px solid #949494;\n    border-radius: 12px;\n    cursor: grab;\n    margin: 5px;\n`\n\nconst Word: React.FC<TextInterface> = ({ text }) => {\n    return (\n        <WordContainer>\n            <Text text={text} />\n        </WordContainer>\n    )\n}\n\nexport default Word\n","import React from 'react'\nimport { styled } from 'linaria/react'\n\ntype ButtonT = {\n    onClick: () => void\n}\n\nconst PrimaryButton = styled.button`\n    background: #fff;\n    border: 1px solid #fff;\n    border-radius: 30px;\n    box-shadow: 5px 7px 10px rgba(0, 0, 0, 0.1);\n    font-size: medium;\n    font-weight: 600;\n    padding: 20px;\n    width: 100%;\n\n    &:active {\n        box-shadow: -5px -8px 10px rgba(0, 0, 0, 0.1);\n    }\n`\n\nconst Button: React.FC<ButtonT> = ({ onClick }) => {\n    return <PrimaryButton onClick={onClick}>Check</PrimaryButton>\n}\n\nexport default Button\n","import { OrderedArrayItemT } from '../types'\r\n\r\nexport const shuffleArray = (array: string[]): string[] => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1))\r\n        ;[array[i], array[j]] = [array[j], array[i]]\r\n    }\r\n    return array\r\n}\r\n\r\nexport const makeOrderedArray = (wordsArray: string[]): OrderedArrayItemT[] => {\r\n    const orderedArray: OrderedArrayItemT[] = []\r\n    wordsArray.map((word, index) => {\r\n        orderedArray.push({text: word, order: index})\r\n    })\r\n    return orderedArray\r\n}\r\n\r\nexport const sortByOrder = (wordA: OrderedArrayItemT, wordB: OrderedArrayItemT): number => {\r\n    if (wordA.order > wordB.order) {\r\n        return 1\r\n    }\r\n    if (wordA.order < wordB.order) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport { styled } from 'linaria/react'\nimport Text from '../atoms/Text'\nimport Word from '../atoms/Word'\nimport Button from '../atoms/Button'\nimport { CloudInterface, OrderedArrayItemT, SentenceIndexT } from '../../types'\nimport { makeOrderedArray, shuffleArray, sortByOrder } from '../../utils/utils'\nimport { mockSentences } from '../../utils/mock'\n\nconst Cloud = styled.div`\n  align-content: flex-start;\n  align-items: flex-start;\n  border-top: 1px solid #030303;\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 100px;\n  padding-top: 6px;\n`\n\nconst ButtonContainer = styled.div`\n  padding: 0 6px;\n  width: 100%;\n  margin-top: -32px;\n  transition: margin-top 0.5s ease;\n  \n  &[data-status=\"show\"] {\n    margin-top: 12px;\n  }\n`\n\nconst VerificationStatus = styled.div`\n  display: flex;\n  font-weight: 600;\n  justify-content: center;\n  height: 30px;\n  margin-top: 12px;\n\n  &[data-color=\"red\"] {\n    p {\n      color: #f31616;\n    }\n  }\n\n  &[data-color=\"green\"] {\n    p {\n      color: #17d217;\n    }\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  height: 120px;\n`\n\nconst DragAndDropArea: React.FC<SentenceIndexT> = ({ sentenceIndex }) => {\n    const [clouds, setClouds] = useState<CloudInterface[]>()\n    const [currentWord, setCurrentWord] = useState<OrderedArrayItemT | undefined>()\n    const [currentCloud, setCurrentCloud] = useState<CloudInterface | undefined>()\n    const [isWrong, setWrong] = useState<boolean>(false)\n    const [isCorrect, setCorrect] = useState<boolean>(false)\n\n    useEffect(() => {\n        const wordsArray: string[] = mockSentences[sentenceIndex].eng.split(' ')\n        setClouds([\n            { id: 0, words: [] },\n            { id: 1, words: makeOrderedArray(shuffleArray(wordsArray)) },\n        ])\n    }, [sentenceIndex])\n\n    const dragStartHandler = (event: React.DragEvent, cloud: CloudInterface, word: OrderedArrayItemT) => {\n        setCurrentWord(word)\n        setCurrentCloud(cloud)\n        setWrong(false)\n        setCorrect(false)\n    }\n\n    const dragEndHandler = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault()\n    }\n\n    const dragOverHandler = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault()\n    }\n\n    const dropHandler = (event: React.DragEvent<HTMLDivElement>, cloud: CloudInterface, word: OrderedArrayItemT) => {\n        event.preventDefault()\n        event.stopPropagation()\n        if (currentWord && currentCloud?.words && word && cloud.words) {\n            const currentIndex: number = currentCloud.words.indexOf(currentWord)\n            currentCloud.words.splice(currentIndex, 1)\n\n            const dropIndex: number = cloud.words.indexOf(word)\n            cloud.words.splice(dropIndex, 0, currentWord)\n\n            setClouds(\n                clouds?.map((c: CloudInterface) => {\n                    if (c.id === cloud.id) {\n                        return cloud\n                    }\n                    if (c.id === currentCloud.id) {\n                        return currentCloud\n                    }\n                    return c\n                })\n            )\n        }\n    }\n\n    const dropCloudHandler = (event: React.DragEvent<HTMLDivElement>, cloud: CloudInterface) => {\n        event.preventDefault()\n        event.stopPropagation()\n        if (currentWord && currentCloud?.words && cloud.words) {\n            cloud.words?.push(currentWord)\n            const currentIndex: number = currentCloud.words.indexOf(currentWord)\n            currentCloud.words.splice(currentIndex, 1)\n            setClouds(\n                clouds?.map((c) => {\n                    if (c.id === cloud.id) {\n                        return cloud\n                    }\n                    if (c.id === currentCloud.id) {\n                        return currentCloud\n                    }\n                    return c\n                })\n            )\n        }\n    }\n\n    const checkSentence = () => {\n        if (clouds && clouds[0].words) {\n            const sentence: string | undefined = clouds[0].words.map((word) => word.text).join(' ')\n            if (sentence !== mockSentences[sentenceIndex].eng) {\n                setWrong(true)\n            }\n            if (sentence === mockSentences[sentenceIndex].eng) {\n                const utterThis = new SpeechSynthesisUtterance(sentence)\n                utterThis.lang = 'en-US'\n                setCorrect(true)\n                if (!speechSynthesis.speaking) {\n                    speechSynthesis.speak(utterThis)\n                }\n            }\n        }\n    }\n\n    return (\n        <>\n            {clouds?.map((cloud: CloudInterface) => (\n                <Cloud\n                    onDragOver={(event: React.DragEvent<HTMLDivElement>) => dragOverHandler(event)}\n                    onDrop={(event: React.DragEvent<HTMLDivElement>) => dropCloudHandler(event, cloud)}\n                    key={cloud.id}\n                >\n                    {cloud.words?.map((word: OrderedArrayItemT) => {\n                        cloud.id === 1 && cloud.words?.sort(sortByOrder)\n                        return (\n                            <div\n                                onDragStart={(event: React.DragEvent) => dragStartHandler(event, cloud, word)}\n                                onDragLeave={(event: React.DragEvent<HTMLDivElement>) => dragEndHandler(event)}\n                                onDragEnd={(event: React.DragEvent<HTMLDivElement>) => dragEndHandler(event)}\n                                onDragOver={(event: React.DragEvent<HTMLDivElement>) => dragOverHandler(event)}\n                                onDrop={(event: React.DragEvent<HTMLDivElement>) => dropHandler(event, cloud, word)}\n                                draggable={true}\n                                key={word.text + word.order}\n                            >\n                                <Word text={word.text} />\n                            </div>\n                        )\n                    })}\n                </Cloud>\n            ))}\n            <ButtonWrapper>\n                <VerificationStatus\n                    data-color={isWrong && 'red' || isCorrect && 'green'}\n                >\n                    {isWrong && <Text text={'Something is wrong!'} />}\n                    {isCorrect && <Text text={'Correct!'} />}\n                </VerificationStatus>\n                <ButtonContainer\n                    data-status={(isWrong || isCorrect) && 'show'}\n                >\n                    <Button onClick={checkSentence} />\n                </ButtonContainer>\n            </ButtonWrapper>\n        </>\n    )\n}\n\nexport default DragAndDropArea\n","import React from 'react'\nimport { styled } from 'linaria/react'\nimport TranslatedSentence from '../molecules/TranslatedSentence'\nimport DragAndDropArea from './DragAndDropArea'\n\nconst CheckSentenceBlockContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 auto;\n  height: 100vh;\n  width: 32vw;\n`\n\nconst Heading = styled.h1`\n  font-weight: 500;\n  margin-bottom: 24px;\n`\n\nconst TranslatedSentenceContainer = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CheckSentenceBlock: React.FC = () => {\n    const sentenceIndex = Math.floor(Math.random() * 2)\n    return (\n        <CheckSentenceBlockContainer>\n            <Heading>Translate this sentence</Heading>\n            <TranslatedSentenceContainer>\n                <TranslatedSentence sentenceIndex={sentenceIndex} />\n            </TranslatedSentenceContainer>\n            <DragAndDropArea sentenceIndex={sentenceIndex} />\n        </CheckSentenceBlockContainer>\n    )\n}\n\nexport default CheckSentenceBlock\n","import React from 'react'\nimport CheckSentenceBlock from '../components/organisms/CheckSentenceBlock'\n\nconst HomePage: React.FC = () => {\n    return <CheckSentenceBlock />\n}\n\nexport default HomePage\n","import React from 'react'\nimport HomePage from './pages/HomePage'\nimport './App.css'\n\nfunction App(): React.ReactElement {\n    return (\n        <>\n            <HomePage />\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}